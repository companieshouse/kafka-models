/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package uk.gov.companieshouse.filing.received;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PresenterRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7368605822342125729L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PresenterRecord\",\"namespace\":\"uk.gov.companieshouse.filing.received\",\"fields\":[{\"name\":\"forename\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"language\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"surname\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"user_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String forename;
  @Deprecated public java.lang.String language;
  @Deprecated public java.lang.String surname;
  @Deprecated public java.lang.String user_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PresenterRecord() {}

  /**
   * All-args constructor.
   * @param forename The new value for forename
   * @param language The new value for language
   * @param surname The new value for surname
   * @param user_id The new value for user_id
   */
  public PresenterRecord(java.lang.String forename, java.lang.String language, java.lang.String surname, java.lang.String user_id) {
    this.forename = forename;
    this.language = language;
    this.surname = surname;
    this.user_id = user_id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return forename;
    case 1: return language;
    case 2: return surname;
    case 3: return user_id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: forename = (java.lang.String)value$; break;
    case 1: language = (java.lang.String)value$; break;
    case 2: surname = (java.lang.String)value$; break;
    case 3: user_id = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'forename' field.
   * @return The value of the 'forename' field.
   */
  public java.lang.String getForename() {
    return forename;
  }

  /**
   * Sets the value of the 'forename' field.
   * @param value the value to set.
   */
  public void setForename(java.lang.String value) {
    this.forename = value;
  }

  /**
   * Gets the value of the 'language' field.
   * @return The value of the 'language' field.
   */
  public java.lang.String getLanguage() {
    return language;
  }

  /**
   * Sets the value of the 'language' field.
   * @param value the value to set.
   */
  public void setLanguage(java.lang.String value) {
    this.language = value;
  }

  /**
   * Gets the value of the 'surname' field.
   * @return The value of the 'surname' field.
   */
  public java.lang.String getSurname() {
    return surname;
  }

  /**
   * Sets the value of the 'surname' field.
   * @param value the value to set.
   */
  public void setSurname(java.lang.String value) {
    this.surname = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.String getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.user_id = value;
  }

  /**
   * Creates a new PresenterRecord RecordBuilder.
   * @return A new PresenterRecord RecordBuilder
   */
  public static uk.gov.companieshouse.filing.received.PresenterRecord.Builder newBuilder() {
    return new uk.gov.companieshouse.filing.received.PresenterRecord.Builder();
  }

  /**
   * Creates a new PresenterRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PresenterRecord RecordBuilder
   */
  public static uk.gov.companieshouse.filing.received.PresenterRecord.Builder newBuilder(uk.gov.companieshouse.filing.received.PresenterRecord.Builder other) {
    return new uk.gov.companieshouse.filing.received.PresenterRecord.Builder(other);
  }

  /**
   * Creates a new PresenterRecord RecordBuilder by copying an existing PresenterRecord instance.
   * @param other The existing instance to copy.
   * @return A new PresenterRecord RecordBuilder
   */
  public static uk.gov.companieshouse.filing.received.PresenterRecord.Builder newBuilder(uk.gov.companieshouse.filing.received.PresenterRecord other) {
    return new uk.gov.companieshouse.filing.received.PresenterRecord.Builder(other);
  }

  /**
   * RecordBuilder for PresenterRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PresenterRecord>
    implements org.apache.avro.data.RecordBuilder<PresenterRecord> {

    private java.lang.String forename;
    private java.lang.String language;
    private java.lang.String surname;
    private java.lang.String user_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(uk.gov.companieshouse.filing.received.PresenterRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.forename)) {
        this.forename = data().deepCopy(fields()[0].schema(), other.forename);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.language)) {
        this.language = data().deepCopy(fields()[1].schema(), other.language);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.surname)) {
        this.surname = data().deepCopy(fields()[2].schema(), other.surname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user_id)) {
        this.user_id = data().deepCopy(fields()[3].schema(), other.user_id);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PresenterRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(uk.gov.companieshouse.filing.received.PresenterRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.forename)) {
        this.forename = data().deepCopy(fields()[0].schema(), other.forename);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.language)) {
        this.language = data().deepCopy(fields()[1].schema(), other.language);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.surname)) {
        this.surname = data().deepCopy(fields()[2].schema(), other.surname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user_id)) {
        this.user_id = data().deepCopy(fields()[3].schema(), other.user_id);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'forename' field.
      * @return The value.
      */
    public java.lang.String getForename() {
      return forename;
    }

    /**
      * Sets the value of the 'forename' field.
      * @param value The value of 'forename'.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.received.PresenterRecord.Builder setForename(java.lang.String value) {
      validate(fields()[0], value);
      this.forename = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'forename' field has been set.
      * @return True if the 'forename' field has been set, false otherwise.
      */
    public boolean hasForename() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'forename' field.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.received.PresenterRecord.Builder clearForename() {
      forename = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'language' field.
      * @return The value.
      */
    public java.lang.String getLanguage() {
      return language;
    }

    /**
      * Sets the value of the 'language' field.
      * @param value The value of 'language'.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.received.PresenterRecord.Builder setLanguage(java.lang.String value) {
      validate(fields()[1], value);
      this.language = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'language' field has been set.
      * @return True if the 'language' field has been set, false otherwise.
      */
    public boolean hasLanguage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'language' field.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.received.PresenterRecord.Builder clearLanguage() {
      language = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'surname' field.
      * @return The value.
      */
    public java.lang.String getSurname() {
      return surname;
    }

    /**
      * Sets the value of the 'surname' field.
      * @param value The value of 'surname'.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.received.PresenterRecord.Builder setSurname(java.lang.String value) {
      validate(fields()[2], value);
      this.surname = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'surname' field has been set.
      * @return True if the 'surname' field has been set, false otherwise.
      */
    public boolean hasSurname() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'surname' field.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.received.PresenterRecord.Builder clearSurname() {
      surname = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return user_id;
    }

    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.received.PresenterRecord.Builder setUserId(java.lang.String value) {
      validate(fields()[3], value);
      this.user_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.received.PresenterRecord.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public PresenterRecord build() {
      try {
        PresenterRecord record = new PresenterRecord();
        record.forename = fieldSetFlags()[0] ? this.forename : (java.lang.String) defaultValue(fields()[0]);
        record.language = fieldSetFlags()[1] ? this.language : (java.lang.String) defaultValue(fields()[1]);
        record.surname = fieldSetFlags()[2] ? this.surname : (java.lang.String) defaultValue(fields()[2]);
        record.user_id = fieldSetFlags()[3] ? this.user_id : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
