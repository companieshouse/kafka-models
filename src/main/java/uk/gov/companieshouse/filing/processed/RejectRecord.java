/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package uk.gov.companieshouse.filing.processed;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RejectRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 558336887439616934L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RejectRecord\",\"namespace\":\"uk.gov.companieshouse.filing.processed\",\"fields\":[{\"name\":\"reasons_english\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},{\"name\":\"reasons_welsh\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.String> reasons_english;
  @Deprecated public java.util.List<java.lang.String> reasons_welsh;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RejectRecord() {}

  /**
   * All-args constructor.
   * @param reasons_english The new value for reasons_english
   * @param reasons_welsh The new value for reasons_welsh
   */
  public RejectRecord(java.util.List<java.lang.String> reasons_english, java.util.List<java.lang.String> reasons_welsh) {
    this.reasons_english = reasons_english;
    this.reasons_welsh = reasons_welsh;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return reasons_english;
    case 1: return reasons_welsh;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: reasons_english = (java.util.List<java.lang.String>)value$; break;
    case 1: reasons_welsh = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'reasons_english' field.
   * @return The value of the 'reasons_english' field.
   */
  public java.util.List<java.lang.String> getReasonsEnglish() {
    return reasons_english;
  }

  /**
   * Sets the value of the 'reasons_english' field.
   * @param value the value to set.
   */
  public void setReasonsEnglish(java.util.List<java.lang.String> value) {
    this.reasons_english = value;
  }

  /**
   * Gets the value of the 'reasons_welsh' field.
   * @return The value of the 'reasons_welsh' field.
   */
  public java.util.List<java.lang.String> getReasonsWelsh() {
    return reasons_welsh;
  }

  /**
   * Sets the value of the 'reasons_welsh' field.
   * @param value the value to set.
   */
  public void setReasonsWelsh(java.util.List<java.lang.String> value) {
    this.reasons_welsh = value;
  }

  /**
   * Creates a new RejectRecord RecordBuilder.
   * @return A new RejectRecord RecordBuilder
   */
  public static uk.gov.companieshouse.filing.processed.RejectRecord.Builder newBuilder() {
    return new uk.gov.companieshouse.filing.processed.RejectRecord.Builder();
  }

  /**
   * Creates a new RejectRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RejectRecord RecordBuilder
   */
  public static uk.gov.companieshouse.filing.processed.RejectRecord.Builder newBuilder(uk.gov.companieshouse.filing.processed.RejectRecord.Builder other) {
    return new uk.gov.companieshouse.filing.processed.RejectRecord.Builder(other);
  }

  /**
   * Creates a new RejectRecord RecordBuilder by copying an existing RejectRecord instance.
   * @param other The existing instance to copy.
   * @return A new RejectRecord RecordBuilder
   */
  public static uk.gov.companieshouse.filing.processed.RejectRecord.Builder newBuilder(uk.gov.companieshouse.filing.processed.RejectRecord other) {
    return new uk.gov.companieshouse.filing.processed.RejectRecord.Builder(other);
  }

  /**
   * RecordBuilder for RejectRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RejectRecord>
    implements org.apache.avro.data.RecordBuilder<RejectRecord> {

    private java.util.List<java.lang.String> reasons_english;
    private java.util.List<java.lang.String> reasons_welsh;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(uk.gov.companieshouse.filing.processed.RejectRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.reasons_english)) {
        this.reasons_english = data().deepCopy(fields()[0].schema(), other.reasons_english);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reasons_welsh)) {
        this.reasons_welsh = data().deepCopy(fields()[1].schema(), other.reasons_welsh);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RejectRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(uk.gov.companieshouse.filing.processed.RejectRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.reasons_english)) {
        this.reasons_english = data().deepCopy(fields()[0].schema(), other.reasons_english);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reasons_welsh)) {
        this.reasons_welsh = data().deepCopy(fields()[1].schema(), other.reasons_welsh);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'reasons_english' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getReasonsEnglish() {
      return reasons_english;
    }

    /**
      * Sets the value of the 'reasons_english' field.
      * @param value The value of 'reasons_english'.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.processed.RejectRecord.Builder setReasonsEnglish(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.reasons_english = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'reasons_english' field has been set.
      * @return True if the 'reasons_english' field has been set, false otherwise.
      */
    public boolean hasReasonsEnglish() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'reasons_english' field.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.processed.RejectRecord.Builder clearReasonsEnglish() {
      reasons_english = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'reasons_welsh' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getReasonsWelsh() {
      return reasons_welsh;
    }

    /**
      * Sets the value of the 'reasons_welsh' field.
      * @param value The value of 'reasons_welsh'.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.processed.RejectRecord.Builder setReasonsWelsh(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.reasons_welsh = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'reasons_welsh' field has been set.
      * @return True if the 'reasons_welsh' field has been set, false otherwise.
      */
    public boolean hasReasonsWelsh() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'reasons_welsh' field.
      * @return This builder.
      */
    public uk.gov.companieshouse.filing.processed.RejectRecord.Builder clearReasonsWelsh() {
      reasons_welsh = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public RejectRecord build() {
      try {
        RejectRecord record = new RejectRecord();
        record.reasons_english = fieldSetFlags()[0] ? this.reasons_english : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.reasons_welsh = fieldSetFlags()[1] ? this.reasons_welsh : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
